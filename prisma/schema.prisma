// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  preferences   UserPreference?
  templates     CodeTemplate[]
  generations   CodeGeneration[]
  analyses      CodeAnalysis[]
  projects      Project[]
  posts         Post[]
}

model UserPreference {
  id               String   @id @default(cuid())
  userId           String   @unique
  preferredLanguage String   @default("typescript")
  codeStyle        String   @default("functional") // functional, object-oriented, procedural
  commentStyle     String   @default("detailed")   // detailed, minimal, none
  testingFramework String?  // jest, mocha, pytest, etc.
  linter           String?  // eslint, pylint, etc.
  aiProvider       String   @default("local")
  aiModel          String   @default("gpt-3.5-turbo")
  maxTokens        Int      @default(2000)
  temperature      Float    @default(0.7)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  
  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model CodeTemplate {
  id          String   @id @default(cuid())
  name        String
  description String
  language    String
  framework  String?
  pattern     String
  template    String
  variables   String   // JSON string of template variables
  examples    String   // JSON string of template examples
  isPublic    Boolean  @default(true)
  isBuiltIn   Boolean  @default(false)
  userId      String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  user     User? @relation(fields: [userId], references: [id], onDelete: SetNull)
  generations CodeGeneration[]
}

model CodeGeneration {
  id          String   @id @default(cuid())
  prompt      String
  language    String
  framework   String?
  context     String?  // JSON string of context
  options     String?  // JSON string of options
  generatedCode String
  explanation String?
  confidence  Float
  suggestions String?  // JSON string of suggestions
  tests       String?
  metadata    String?  // JSON string of metadata
  templateId  String?
  userId      String?
  createdAt   DateTime @default(now())
  
  // Relations
  template CodeTemplate? @relation(fields: [templateId], references: [id], onDelete: SetNull)
  user     User? @relation(fields: [userId], references: [id], onDelete: SetNull)
}

model CodeAnalysis {
  id          String   @id @default(cuid())
  code        String
  language    String
  filePath    String?
  complexity  Int
  dependencies String // JSON string of dependencies
  exports     String // JSON string of exports
  imports     String // JSON string of imports
  patterns    String // JSON string of patterns
  issues      String // JSON string of issues
  metrics     String // JSON string of metrics
  userId      String?
  createdAt   DateTime @default(now())
  
  // Relations
  user User? @relation(fields: [userId], references: [id], onDelete: SetNull)
}

model Project {
  id          String   @id @default(cuid())
  name        String
  path        String   @unique
  description String?
  language    String?
  framework   String?
  structure   String   // JSON string of project structure
  dependencies String // JSON string of dependencies
  config      String   // JSON string of project config
  lastAnalyzed DateTime?
  userId      String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  user User? @relation(fields: [userId], references: [id], onDelete: SetNull)
}

model Post {
  id        String   @id @default(cuid())
  title     String
  content   String?
  published Boolean  @default(false)
  authorId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  author User @relation(fields: [authorId], references: [id], onDelete: Cascade)
}